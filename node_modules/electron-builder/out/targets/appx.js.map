{"version":3,"file":"appx.js","sourceRoot":"","sources":["../../src/targets/appx.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, getArchSuffix, Target } from \"electron-builder-core\"\nimport { spawn, use } from \"electron-builder-util\"\nimport { copyDir, copyFile } from \"electron-builder-util/out/fs\"\nimport { emptyDir, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { AppXOptions } from \"../options/winOptions\"\nimport { getSignVendorPath, isOldWin6 } from \"../windowsCodeSign\"\nimport { WinPackager } from \"../winPackager\"\n\nexport default class AppXTarget extends Target {\n  readonly options: AppXOptions = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"appx\")\n\n    if (process.platform !== \"win32\" || isOldWin6()) {\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\n    }\n  }\n\n  // no flatten - use asar or npm 3 or yarn\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n\n    if ((await packager.cscInfo.value) == null) {\n      throw new Error(\"AppX package must be signed, but certificate is not set, please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing\\n\\nYou can use `./node_modules/.bin/create-self-signed-cert -p YourName` to create self-signed certificate\")\n    }\n\n    let publisher = this.options.publisher\n    if (publisher == null) {\n      const computed = await packager.computedPublisherName.value\n      if (computed != null) {\n        publisher = `CN=${computed[0]}`\n      }\n      if (publisher == null) {\n        throw new Error(\"Please specify appx.publisher\")\n      }\n    }\n\n    const appInfo = packager.appInfo\n\n    const preAppx = path.join(this.outDir, `pre-appx-${getArchSuffix(arch)}`)\n    await emptyDir(preAppx)\n\n    const vendorPath = await getSignVendorPath()\n\n    const templatePath = path.join(__dirname, \"..\", \"..\", \"templates\", \"appx\")\n    const safeName = sanitizeFileName(appInfo.name)\n    const resourceList = await packager.resourceList\n    await BluebirdPromise.all([\n      BluebirdPromise.map([\"44x44\", \"50x50\", \"150x150\", \"310x150\"], size => {\n        const target = path.join(preAppx, \"assets\", `${safeName}.${size}.png`)\n        if (resourceList.includes(`${size}.png`)) {\n          return copyFile(path.join(packager.buildResourcesDir, `${size}.png`), target)\n        }\n        return copyFile(path.join(vendorPath, \"appxAssets\", `SampleAppx.${size}.png`), target)\n      }),\n      copyDir(appOutDir, path.join(preAppx, \"app\")),\n      this.writeManifest(templatePath, preAppx, safeName, arch, publisher)\n    ])\n\n    const destination = path.join(this.outDir, packager.expandArtifactNamePattern(this.options, \"appx\", arch))\n    const args = [\"pack\", \"/o\", \"/d\", preAppx, \"/p\", destination]\n    use(this.options.makeappxArgs, (it: Array<string>) => args.push(...it))\n    // wine supports only ia32 binary in any case makeappx crashed on wine\n    // await execWine(path.join(await getSignVendorPath(), \"windows-10\", process.platform === \"win32\" ? process.arch : \"ia32\", \"makeappx.exe\"), args)\n    await spawn(path.join(vendorPath, \"windows-10\", arch === Arch.ia32 ? \"ia32\" : \"x64\", \"makeappx.exe\"), args)\n\n    await packager.sign(destination)\n    packager.dispatchArtifactCreated(destination, this, arch, packager.expandArtifactNamePattern(this.options, \"appx\", arch, \"${name}-${version}-${arch}.${ext}\"))\n  }\n\n  private async writeManifest(templatePath: string, preAppx: string, safeName: string, arch: Arch, publisher: string) {\n    const appInfo = this.packager.appInfo\n    const manifest = (await readFile(path.join(templatePath, \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\$\\{([a-zA-Z]+)\\}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return publisher\n\n          case \"publisherDisplayName\":\n            const name = this.options.publisherDisplayName || appInfo.companyName\n            if (name == null) {\n              throw new Error(`Please specify \"author\" in the application package.json â€” it is required because \"appx.publisherDisplayName\" is not set.`)\n            }\n            return name\n\n          case \"version\":\n            return appInfo.versionInWeirdWindowsForm\n\n          case \"name\":\n            return appInfo.name\n            \n          case \"identityName\":\n            return this.options.identityName  || appInfo.name\n\n          case \"executable\":\n            return `app\\\\${appInfo.productFilename}.exe`\n\n          case \"displayName\":\n            return this.options.displayName || appInfo.productName\n            \n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return this.options.backgroundColor || \"#464646\"\n\n          case \"safeName\":\n            return safeName\n            \n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(path.join(preAppx, \"appxmanifest.xml\"), manifest)\n  }\n}\n"]}
