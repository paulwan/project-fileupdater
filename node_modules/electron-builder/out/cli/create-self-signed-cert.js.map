{"version":3,"file":"create-self-signed-cert.js","sourceRoot":"","sources":["../../src/cli/create-self-signed-cert.ts"],"names":[],"mappings":";;;;;;;;;oEAYA,AAAK;AACH,cAAM,AAAI,yCACP,AAAM,OAAC,AAAW;AACjB,AAAK,mBAAE,CAAC,AAAG,AAAC;AACZ,AAAW,yBAAE,AAAI,AAClB,AAAC;AAHmB,SADL,AAAK,EAIlB,AAAI;AAET,cAAM,AAAM,SAAG,AAAI,AAAM,AAAE;AAC3B,cAAM,AAAS,YAAG,AAAO,QAAC,AAAG,AAAE;AAC/B,cAAM,AAAU,aAAG,AAAI,MAAC,AAAI,MAAC,MAAM,AAAM,OAAC,AAAW,YAAC,AAAE,AAAC,MAAE,AAAgB,6DAAC,AAAI,KAAC,AAAS,AAAC,AAAC;AAC5F,cAAM,AAAG,AAAG,SAAG,AAAU,UAAM;AAC/B,cAAM,AAAG,AAAG,SAAG,AAAU,UAAM;AAE/B,AAAG,uCAAC,AAAI,oCAAC,AAAuF,AAAC,AAAC;AAElG,YAAI,AAAC;AACH,kBAAM,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAU,AAAC,AAAC;AACzC,kBAAM,AAAU,aAAG,AAAI,MAAC,AAAI,MAAC,MAAM,AAAiB,AAAE,yEAAE,AAAY,cAAE,AAAO,QAAC,AAAI,AAAC;AACnF,kBAAM,AAAI,gEAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC,iBAC9C,CAAC,AAAI,MAAE,AAAI,MAAE,AAAG,KAAE,AAAI,AAAE,YAAM,AAAI,KAAC,AAAS,SAAE,IAAE,AAAM,QAAE,AAAmB,qBAAE,AAAK,OAAE,AAAK,OAAE,AAAG,KAAE,AAAG,AAAC,AAAC;AAEvG,kBAAM,AAAG,MAAG,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,cAAG,AAAgB,6DAAC,AAAI,KAAC,AAAS,AAAC,UAAM,AAAC;AAC3E,kBAAM,AAAc,wCAAC,AAAG,AAAC;AACzB,kBAAM,AAAI,gEAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAa,AAAC,gBAAE,CAAC,AAAM,QAAE,AAAG,KAAE,AAAM,QAAE,AAAG,KAAE,AAAM,QAAE,AAAG,AAAC,AAAC;AACzF,AAAG,AAAC,8CAAG,AAAG,GAAqH,AAAC;AAEhI,kBAAM,AAAY,eAAG,AAAoC;AACzD,AAAG,AAAC,8CAAG,AAAG,6BAA0B,AAAY,YAAsF,AAAC;AACvI,kBAAM,AAAK,iEAAC,AAAgB,kBAAE,CAAC,AAAuB,yBAAE,AAAW,AAAE,iBAAI,AAAG,GAAG,KAAE,AAAoB,sBAAE,AAAE,AAAC,AAAC,AAC7G;AAAC,kBACO,AAAC;AACP,kBAAM,AAAM,OAAC,AAAO,AAAE,AACxB;AAAC,AACH;AAAC;;;;;;;;;AA7CD,AAAO,AAAE,AAAI,AAAE,AAAM,AAAO;;;;;;AAC5B,AAAO,AAAE,AAAI,AAAE,AAAK,AAAE,AAAM,AAAuB;;;;;;AACnD,AAAO,AAAE,AAAc,AAAE,AAAM,AAA8B;;;;;;AAC7D,AAAO,AAAE,AAAG,AAAE,AAAM,AAA+B;;;;;;AACnD,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAmC;;;;;;AACrE,AAAO,AAAE,AAAM,AAAE,AAAM,AAA+B;;;;;;AACtD,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACtC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAgB,AAAM,AAAmB;;;;;;AAChD,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAoB;;;;;;;;AAqCtD,AAAI,AAAE,OACH,AAAK,AAAC,AAAiB,AAAC","sourcesContent":["import { bold } from \"chalk\"\nimport { exec, spawn } from \"electron-builder-util\"\nimport { unlinkIfExists } from \"electron-builder-util/out/fs\"\nimport { log } from \"electron-builder-util/out/log\"\nimport { printErrorAndExit } from \"electron-builder-util/out/promise\"\nimport { TmpDir } from \"electron-builder-util/out/tmp\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport yargs from \"yargs\"\nimport { getSignVendorPath } from \"../windowsCodeSign\"\n\nasync function main() {\n  const args: any = yargs\n    .option(\"publisher\", {\n      alias: [\"p\"],\n      requiresArg: true,\n    }).argv\n\n  const tmpDir = new TmpDir()\n  const targetDir = process.cwd()\n  const tempPrefix = path.join(await tmpDir.getTempFile(\"\"), sanitizeFileName(args.publisher))\n  const cer = `${tempPrefix}.cer`\n  const pvk = `${tempPrefix}.pvk`\n\n  log(bold('When asked to enter a password (\"Create Private Key Password\"), please select \"None\".'))\n\n  try {\n    await ensureDir(path.dirname(tempPrefix))\n    const vendorPath = path.join(await getSignVendorPath(), \"windows-10\", process.arch)\n    await exec(path.join(vendorPath, \"makecert.exe\"),\n      [\"-r\", \"-h\", \"0\", \"-n\", `CN=${args.publisher}`, \"-eku\", \"1.3.6.1.5.5.7.3.3\", \"-pe\", \"-sv\", pvk, cer])\n\n    const pfx = path.join(targetDir, `${sanitizeFileName(args.publisher)}.pfx`)\n    await unlinkIfExists(pfx)\n    await exec(path.join(vendorPath, \"pvk2pfx.exe\"), [\"-pvk\", pvk, \"-spc\", cer, \"-pfx\", pfx])\n    log(`${pfx} created. Please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing how to use it to sign.`)\n\n    const certLocation = \"Cert:\\\\LocalMachine\\\\TrustedPeople\"\n    log(`${pfx} will be imported into ${certLocation} Operation will be succeed only if runned from root. Otherwise import file manually.`)\n    await spawn(\"powershell.exe\", [\"Import-PfxCertificate\", \"-FilePath\", `\"${pfx}\"`, \"-CertStoreLocation\", \"\"])\n  }\n  finally {\n    await tmpDir.cleanup()\n  }\n}\n\nmain()\n  .catch(printErrorAndExit)"]}
